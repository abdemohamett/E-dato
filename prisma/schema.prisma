// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  id              String    @id @default(uuid())
  name            String
  userId          String
  expenses       Expense[] @relation("StoreExpense")
  customers      Customer[] @relation("StoreCustomer")
  debts          Debt[] @relation("StoreDebt")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Expense {
  id              String    @id @default(uuid())
  storeId         String
  amount          Decimal
  item            String
  userId          String
  store           Store @relation("StoreExpense", fields: [storeId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([storeId])
}

model Customer {
  id              String    @id @default(uuid())
  storeId         String
  name            String
  phone           String    @default("")
  userId          String
  store           Store @relation("StoreCustomer", fields: [storeId], references: [id])
  // debts           Debt[] @relation("CustomerDebt")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  debts  Debt[]


  @@index([storeId])
}

model Debt {
  id              String    @id @default(uuid())
  storeId         String
  amount          Decimal
  item            String
  userId          String
  customerId      String
  store           Store @relation("StoreDebt", fields: [storeId], references: [id])
  customer       Customer @relation(fields: [customerId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([storeId])
  @@index([customerId])
}